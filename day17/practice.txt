* Chapter 07: Queue

1. 정답: ④
줄을 선 사람이 1명일 때만 맞는 말이다.

2.
enQueue(삽입), deQueue(추출), front(데이터의 시작 지점-1), rear(데이터의 끝 지점)

3.
① rear += 1
② front += 1

4. 정답: ②
데이터의 끝 지점인 rear 가 (SIZE-1)에 와 있어야 큐가 꽉 찬 상태일 수 있다.
(하지만 이 상태에서 front 가 -1이어야만 실제로 꽉 찬 상태이다.)

5. 정답: ②
front와 rear가 같으면 데이터는 없다.

6.
① return None
② return queue[front+1]


* Chapter 08: Binary Tree

1.
트리의 맨 위를 [루트] 라고 한다.
[루트] 를 [레벨] 0으로 두고 나뭇잎에 해당하는 아래로 내려올수록 [레벨] 이 1씩 증가한다.
트리에서 각 위치를 [노드] 라고 한다. 각 [노드] 는 [에지] 로 연결되어 있다.

2. 정답: ①, ②, ③, ④
차수가 3 이상인 노드는 없으므로 모두 해당된다.

3.
① 편향 이진 트리: 모든 노드가 오른쪽이나 왼쪽으로 연결된 트리다.
② 포화 이진 트리: 모든 노드가 꽉 차 있는 상태의 트리다.
③ 완전 이진 트리: 번호 부여 순서로 노드가 배치된다. 노드가 일부 비어 있어도 된다.

4. 정답: ③
링크는 에지를 의미하고, 에지의 개수는 차수를 의미한다.
그러므로 링크가 3개 이상이라는 것은, 이진 트리의 차수가 3 이상일 수도 있다는 뜻이므로 모순이다.

5.
후위 순회 (현재 노드의 데이터를 마지막에 처리했기 때문)

6.
전위 순회 결과: 화사 솔라 휘인 쯔위 문별 선미
중위 순회 결과: 휘인 솔라 쯔위 화사 선미 문별
후위 순회 결과: 휘인 쯔위 솔라 선미 문별 화사

7. 정답: ④
이진 탐색 트리의 노드 값의 중복은 허용되지 않는다.

8. 정답: ④
리프 노드 삭제 시에는 부모 노드와의 연결을 끊고 자기 자신을 제거하면 된다.
자식 노드가 하나인 노드는 부모 노드를 자식 노드와 연결한 후 자기 자신을 제거하면 된다.
자식 노드가 둘 있는 노드의 경우는 재귀 호출이 필요하다.

9.
① name < current.data
② current = current.left
③ current = current.right

10. 정답: ③
nameAry 안의 값 전부를 넣는 게 목적이라면,
이미 트리 안에 있는 0번 값을 제외한 값들(nameAry[1:])을 넣으면 된다.
